@using System.Globalization
@model OCR_AccessControl.Models.PaginatedList<OCR_AccessControl.Models.NonResidentLogs>

@{
    Layout = "_AdminLayout";
}

<link rel="stylesheet" href="~/css/timeinout.css" asp-append-version="true" />

<div class="p-5 main-content">
    <h3 class="mb-3">Time Out Exits</h3>
    <div class="d-flex flex-column bg-light p-3">

        <!-- Scrollable Table Container -->
        <div class="table-container mb-3" style="max-height: 60vh; overflow-y: auto;">

            @if (Model.Any()) // Check if there's data before rendering the table
            {
                <table class="table table-striped table-hover text-center">
                    <thead>
                        <tr>
                            <th>Full Name</th>
                            <th>ID Type</th>
                            <th>ID Number</th>
                            <th>Time Out</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var nonResident in Model)
                        {
                            var entryTimeLocal = nonResident.entry_time; // Already in PH time
                            var exitTimeLocal = nonResident.exit_time;    // Already in PH time

                            string timeIn = entryTimeLocal.HasValue
                            ? entryTimeLocal.Value.ToString("MMM dd, yyyy hh:mm tt", CultureInfo.CurrentCulture)
                            : "-";

                            string timeOut = exitTimeLocal.HasValue
                            ? exitTimeLocal.Value.ToString("MMM dd, yyyy hh:mm tt", CultureInfo.CurrentCulture)
                            : "-";

                            bool isOverdue = false;
                            bool exitedAfterOverdue = false;
                            string statusText = "";

                            if (entryTimeLocal.HasValue && exitTimeLocal.HasValue)
                            {
                                var duration = exitTimeLocal.Value - entryTimeLocal.Value;
                                string durationText = $"{(int)duration.TotalHours}h {duration.Minutes}m";

                                // Check if the stay was overdue (>=24 hours)
                                exitedAfterOverdue = duration.TotalHours >= 24;

                                statusText = exitedAfterOverdue
                                ? $"<span class='alert alert-danger py-1 px-2 d-inline-block m-0'>Exited after overdue ({durationText})</span>"
                                : $"<span class='alert alert-success py-1 px-2 d-inline-block m-0'>Exited ({durationText})</span>";
                            }

                            <tr>
                                <td>@nonResident.full_name</td>
                                <td>@nonResident.id_type</td>
                                <td>@nonResident.id_number</td>
                                <td>@timeOut</td> <!-- Corrected to show exit time -->
                                <td>@Html.Raw(statusText)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info w-100">No Exit Data found.</div>
            }

        </div>

        <!-- Pagination -->
        <nav aria-label="Page navigation" class="w-100 mt-3">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link" href="@Url.Action("TimeOut", new { pageNumber = Model.PageIndex - 1 })">Previous</a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                        <a class="page-link" href="@Url.Action("TimeOut", new { pageNumber = i })">@i</a>
                    </li>
                }
                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    <a class="page-link" href="@Url.Action("TimeOut", new { pageNumber = Model.PageIndex + 1 })">Next</a>
                </li>
            </ul>
        </nav>

    </div>
</div>

